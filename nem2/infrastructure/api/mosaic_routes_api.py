# coding: utf-8

"""
    Catapult REST API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MosaicRoutesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_mosaic(self, mosaic_id, **kwargs):  # noqa: E501
        """Get mosaic information  # noqa: E501

        Gets the mosaic definition for a given mosaicId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mosaic(mosaic_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mosaic_id: The mosaic identifier. (required)
        :return: MosaicInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mosaic_with_http_info(mosaic_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mosaic_with_http_info(mosaic_id, **kwargs)  # noqa: E501
            return data

    def get_mosaic_with_http_info(self, mosaic_id, **kwargs):  # noqa: E501
        """Get mosaic information  # noqa: E501

        Gets the mosaic definition for a given mosaicId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mosaic_with_http_info(mosaic_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mosaic_id: The mosaic identifier. (required)
        :return: MosaicInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mosaic_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mosaic" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mosaic_id' is set
        if ('mosaic_id' not in params or
                params['mosaic_id'] is None):
            raise ValueError("Missing the required parameter `mosaic_id` when calling `get_mosaic`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mosaic_id' in params:
            path_params['mosaicId'] = params['mosaic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mosaic/{mosaicId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MosaicInfoDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mosaics(self, mosaic_ids, **kwargs):  # noqa: E501
        """Get mosaics information for an array of mosaics  # noqa: E501

        Gets an array of mosaic definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mosaics(mosaic_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MosaicIds mosaic_ids: An array of mosaicIds. (required)
        :return: list[MosaicInfoDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mosaics_with_http_info(mosaic_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mosaics_with_http_info(mosaic_ids, **kwargs)  # noqa: E501
            return data

    def get_mosaics_with_http_info(self, mosaic_ids, **kwargs):  # noqa: E501
        """Get mosaics information for an array of mosaics  # noqa: E501

        Gets an array of mosaic definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mosaics_with_http_info(mosaic_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MosaicIds mosaic_ids: An array of mosaicIds. (required)
        :return: list[MosaicInfoDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mosaic_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mosaics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mosaic_ids' is set
        if ('mosaic_ids' not in params or
                params['mosaic_ids'] is None):
            raise ValueError("Missing the required parameter `mosaic_ids` when calling `get_mosaics`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mosaic_ids' in params:
            body_params = params['mosaic_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mosaic', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MosaicInfoDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mosaics_name(self, mosaic_ids, **kwargs):  # noqa: E501
        """Get readable names for a set of mosaics  # noqa: E501

        Returns friendly names for mosaics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mosaics_name(mosaic_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MosaicIds mosaic_ids: An array of mosaicIds. (required)
        :return: list[MosaicNameDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mosaics_name_with_http_info(mosaic_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mosaics_name_with_http_info(mosaic_ids, **kwargs)  # noqa: E501
            return data

    def get_mosaics_name_with_http_info(self, mosaic_ids, **kwargs):  # noqa: E501
        """Get readable names for a set of mosaics  # noqa: E501

        Returns friendly names for mosaics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mosaics_name_with_http_info(mosaic_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MosaicIds mosaic_ids: An array of mosaicIds. (required)
        :return: list[MosaicNameDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mosaic_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mosaics_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mosaic_ids' is set
        if ('mosaic_ids' not in params or
                params['mosaic_ids'] is None):
            raise ValueError("Missing the required parameter `mosaic_ids` when calling `get_mosaics_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mosaic_ids' in params:
            body_params = params['mosaic_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mosaic/names', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MosaicNameDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
