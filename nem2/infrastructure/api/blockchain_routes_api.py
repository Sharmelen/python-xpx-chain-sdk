# coding: utf-8

"""
    Catapult REST API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BlockchainRoutesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_block_by_height(self, height, **kwargs):  # noqa: E501
        """Get block information  # noqa: E501

        Gets a block from the chain that has the given height.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_by_height(height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int height: The height of the block. (required)
        :return: BlockInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_block_by_height_with_http_info(height, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_by_height_with_http_info(height, **kwargs)  # noqa: E501
            return data

    def get_block_by_height_with_http_info(self, height, **kwargs):  # noqa: E501
        """Get block information  # noqa: E501

        Gets a block from the chain that has the given height.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_by_height_with_http_info(height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int height: The height of the block. (required)
        :return: BlockInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['height']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_by_height" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `get_block_by_height`")  # noqa: E501

        if 'height' in params and params['height'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `height` when calling `get_block_by_height`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'height' in params:
            path_params['height'] = params['height']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/{height}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockInfoDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_receipts(self, height, **kwargs):  # noqa: E501
        """Get receipts from a block  # noqa: E501

        Returns the [receipts](https://nemtech.github.io/concepts/receipt.html) linked to a block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_receipts(height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int height: The height of the block. (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_block_receipts_with_http_info(height, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_receipts_with_http_info(height, **kwargs)  # noqa: E501
            return data

    def get_block_receipts_with_http_info(self, height, **kwargs):  # noqa: E501
        """Get receipts from a block  # noqa: E501

        Returns the [receipts](https://nemtech.github.io/concepts/receipt.html) linked to a block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_receipts_with_http_info(height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int height: The height of the block. (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['height']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_receipts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `get_block_receipts`")  # noqa: E501

        if 'height' in params and params['height'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `height` when calling `get_block_receipts`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'height' in params:
            path_params['height'] = params['height']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/{height}/receipts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_transactions(self, height, **kwargs):  # noqa: E501
        """Get transactions from a block  # noqa: E501

        Returns an array of [transactions](https://nemtech.github.io/concepts/transaction.html) included in a block for a given block height.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_transactions(height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int height: The height of the block. (required)
        :param int page_size: The number of transactions to return for each request.
        :param str id: The transaction id up to which transactions are returned.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_block_transactions_with_http_info(height, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_transactions_with_http_info(height, **kwargs)  # noqa: E501
            return data

    def get_block_transactions_with_http_info(self, height, **kwargs):  # noqa: E501
        """Get transactions from a block  # noqa: E501

        Returns an array of [transactions](https://nemtech.github.io/concepts/transaction.html) included in a block for a given block height.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_transactions_with_http_info(height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int height: The height of the block. (required)
        :param int page_size: The number of transactions to return for each request.
        :param str id: The transaction id up to which transactions are returned.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['height', 'page_size', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `get_block_transactions`")  # noqa: E501

        if 'height' in params and params['height'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `height` when calling `get_block_transactions`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'page_size' in params and params['page_size'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_block_transactions`, must be a value less than or equal to `100`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 10:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_block_transactions`, must be a value greater than or equal to `10`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'height' in params:
            path_params['height'] = params['height']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/{height}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_blockchain_height(self, **kwargs):  # noqa: E501
        """Get the current height of the chain  # noqa: E501

        Returns the current height of the blockchain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blockchain_height(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HeightDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_blockchain_height_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_blockchain_height_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_blockchain_height_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current height of the chain  # noqa: E501

        Returns the current height of the blockchain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blockchain_height_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HeightDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blockchain_height" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/chain/height', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HeightDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_blockchain_score(self, **kwargs):  # noqa: E501
        """Get the current score of the chain  # noqa: E501

        Gets the current score of the blockchain. The higher the score, the better the chain. During synchronization, nodes try to get the best blockchain in the network.  The score for a block is derived from its difficulty and the time (in seconds) that has elapsed since the last block:      block score = difficulty − time elasped since last block   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blockchain_score(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BlockchainScoreDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_blockchain_score_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_blockchain_score_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_blockchain_score_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current score of the chain  # noqa: E501

        Gets the current score of the blockchain. The higher the score, the better the chain. During synchronization, nodes try to get the best blockchain in the network.  The score for a block is derived from its difficulty and the time (in seconds) that has elapsed since the last block:      block score = difficulty − time elasped since last block   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blockchain_score_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BlockchainScoreDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blockchain_score" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/chain/score', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockchainScoreDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_blocks_by_height_with_limit(self, height, limit, **kwargs):  # noqa: E501
        """Get blocks information  # noqa: E501

        Gets up to limit number of blocks after given block height.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blocks_by_height_with_limit(height, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int height: The height of the block. If height -1 is not a multiple of the limit provided, the inferior closest multiple + 1 is used instead. (required)
        :param int limit: The number of blocks to be returned. (required)
        :return: list[BlockInfoDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_blocks_by_height_with_limit_with_http_info(height, limit, **kwargs)  # noqa: E501
        else:
            (data) = self.get_blocks_by_height_with_limit_with_http_info(height, limit, **kwargs)  # noqa: E501
            return data

    def get_blocks_by_height_with_limit_with_http_info(self, height, limit, **kwargs):  # noqa: E501
        """Get blocks information  # noqa: E501

        Gets up to limit number of blocks after given block height.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blocks_by_height_with_limit_with_http_info(height, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int height: The height of the block. If height -1 is not a multiple of the limit provided, the inferior closest multiple + 1 is used instead. (required)
        :param int limit: The number of blocks to be returned. (required)
        :return: list[BlockInfoDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['height', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blocks_by_height_with_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `get_blocks_by_height_with_limit`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_blocks_by_height_with_limit`")  # noqa: E501

        if 'height' in params and params['height'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `height` when calling `get_blocks_by_height_with_limit`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'height' in params:
            path_params['height'] = params['height']  # noqa: E501
        if 'limit' in params:
            path_params['limit'] = params['limit']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/blocks/{height}/limit/{limit}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BlockInfoDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_diagnostic_storage(self, **kwargs):  # noqa: E501
        """Get the storage information  # noqa: E501

        Returns statistical information about the blockchain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_diagnostic_storage(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BlockchainStorageInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_diagnostic_storage_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_diagnostic_storage_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_diagnostic_storage_with_http_info(self, **kwargs):  # noqa: E501
        """Get the storage information  # noqa: E501

        Returns statistical information about the blockchain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_diagnostic_storage_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BlockchainStorageInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_diagnostic_storage" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/diagnostic/storage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockchainStorageInfoDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_merkle_receipts(self, height, hash, **kwargs):  # noqa: E501
        """Get the merkle path for a given a receipt statement hash and block  # noqa: E501

        Returns the merkle path for a [receipt statement or resolution](https://nemtech.github.io/concepts/receipt.html) linked to a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the receipt was linked with the block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_merkle_receipts(height, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int height: The height of the block. (required)
        :param str hash: The hash of the receipt statement or resolution. (required)
        :return: MerkleProofInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_merkle_receipts_with_http_info(height, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_merkle_receipts_with_http_info(height, hash, **kwargs)  # noqa: E501
            return data

    def get_merkle_receipts_with_http_info(self, height, hash, **kwargs):  # noqa: E501
        """Get the merkle path for a given a receipt statement hash and block  # noqa: E501

        Returns the merkle path for a [receipt statement or resolution](https://nemtech.github.io/concepts/receipt.html) linked to a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the receipt was linked with the block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_merkle_receipts_with_http_info(height, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int height: The height of the block. (required)
        :param str hash: The hash of the receipt statement or resolution. (required)
        :return: MerkleProofInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['height', 'hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_merkle_receipts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `get_merkle_receipts`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_merkle_receipts`")  # noqa: E501

        if 'height' in params and params['height'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `height` when calling `get_merkle_receipts`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'height' in params:
            path_params['height'] = params['height']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/{height}/receipt/{hash}/merkle', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MerkleProofInfoDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_merkle_transaction(self, height, hash, **kwargs):  # noqa: E501
        """Get the merkle path for a given a transaction and block  # noqa: E501

        Returns the merkle path for a [transaction](https://nemtech.github.io/concepts/transaction.html) included in a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the transaction was included in the block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_merkle_transaction(height, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int height: The height of the block. (required)
        :param str hash: The hash of the transaction. (required)
        :return: MerkleProofInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_merkle_transaction_with_http_info(height, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_merkle_transaction_with_http_info(height, hash, **kwargs)  # noqa: E501
            return data

    def get_merkle_transaction_with_http_info(self, height, hash, **kwargs):  # noqa: E501
        """Get the merkle path for a given a transaction and block  # noqa: E501

        Returns the merkle path for a [transaction](https://nemtech.github.io/concepts/transaction.html) included in a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the transaction was included in the block.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_merkle_transaction_with_http_info(height, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int height: The height of the block. (required)
        :param str hash: The hash of the transaction. (required)
        :return: MerkleProofInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['height', 'hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_merkle_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `get_merkle_transaction`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_merkle_transaction`")  # noqa: E501

        if 'height' in params and params['height'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `height` when calling `get_merkle_transaction`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'height' in params:
            path_params['height'] = params['height']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/{height}/transaction/{hash}/merkle', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MerkleProofInfoDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
