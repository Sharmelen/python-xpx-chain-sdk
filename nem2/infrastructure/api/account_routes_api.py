# coding: utf-8

"""
    Catapult REST API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountRoutesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_account_info(self, account_id, **kwargs):  # noqa: E501
        """Get account information  # noqa: E501

        Returns the account information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The public key or address of the account. (required)
        :return: AccountInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_info_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_info_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_account_info_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Get account information  # noqa: E501

        Returns the account information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_info_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The public key or address of the account. (required)
        :return: AccountInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/{accountId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountInfoDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_multisig(self, account_id, **kwargs):  # noqa: E501
        """Get multisig account information  # noqa: E501

        Returns the [multisig account](https://nemtech.github.io/concepts/multisig-account.html) information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_multisig(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The public key or address of the account. (required)
        :return: MultisigAccountInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_multisig_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_multisig_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_account_multisig_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Get multisig account information  # noqa: E501

        Returns the [multisig account](https://nemtech.github.io/concepts/multisig-account.html) information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_multisig_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The public key or address of the account. (required)
        :return: MultisigAccountInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_multisig" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_multisig`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/{accountId}/multisig', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MultisigAccountInfoDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_multisig_graph(self, account_id, **kwargs):  # noqa: E501
        """Get multisig account graph information  # noqa: E501

        Returns the [multisig account](https://nemtech.github.io/concepts/multisig-account.html) graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_multisig_graph(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The public key or address of the account. (required)
        :return: list[MultisigAccountGraphInfoDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_multisig_graph_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_multisig_graph_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_account_multisig_graph_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Get multisig account graph information  # noqa: E501

        Returns the [multisig account](https://nemtech.github.io/concepts/multisig-account.html) graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_multisig_graph_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The public key or address of the account. (required)
        :return: list[MultisigAccountGraphInfoDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_multisig_graph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_multisig_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/{accountId}/multisig/graph', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MultisigAccountGraphInfoDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_properties(self, account_id, **kwargs):  # noqa: E501
        """Get account configurable properties information  # noqa: E501

        Returns the [configurable properties](https://nemtech.github.io/concepts/account-filter.html) for a given account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_properties(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The public key or address of the account. (required)
        :return: AccountPropertiesInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_properties_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_properties_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_account_properties_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Get account configurable properties information  # noqa: E501

        Returns the [configurable properties](https://nemtech.github.io/concepts/account-filter.html) for a given account.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_properties_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The public key or address of the account. (required)
        :return: AccountPropertiesInfoDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/properties/{accountId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountPropertiesInfoDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_properties_from_accounts(self, addresses, **kwargs):  # noqa: E501
        """Get account properties for given array of addresses  # noqa: E501

        Returns the [configurable properties](https://nemtech.github.io/concepts/account-filter.html) for a given array of addresses.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_properties_from_accounts(addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Addresses addresses: An array of addresses. (required)
        :return: list[AccountPropertiesInfoDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_properties_from_accounts_with_http_info(addresses, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_properties_from_accounts_with_http_info(addresses, **kwargs)  # noqa: E501
            return data

    def get_account_properties_from_accounts_with_http_info(self, addresses, **kwargs):  # noqa: E501
        """Get account properties for given array of addresses  # noqa: E501

        Returns the [configurable properties](https://nemtech.github.io/concepts/account-filter.html) for a given array of addresses.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_properties_from_accounts_with_http_info(addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Addresses addresses: An array of addresses. (required)
        :return: list[AccountPropertiesInfoDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addresses']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_properties_from_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addresses' is set
        if ('addresses' not in params or
                params['addresses'] is None):
            raise ValueError("Missing the required parameter `addresses` when calling `get_account_properties_from_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'addresses' in params:
            body_params = params['addresses']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/properties', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccountPropertiesInfoDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_accounts_info(self, addresses, **kwargs):  # noqa: E501
        """Get accounts information  # noqa: E501

        Returns the account information for an array of accounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts_info(addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Addresses addresses: An array of addresses. (required)
        :return: list[AccountInfoDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_accounts_info_with_http_info(addresses, **kwargs)  # noqa: E501
        else:
            (data) = self.get_accounts_info_with_http_info(addresses, **kwargs)  # noqa: E501
            return data

    def get_accounts_info_with_http_info(self, addresses, **kwargs):  # noqa: E501
        """Get accounts information  # noqa: E501

        Returns the account information for an array of accounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts_info_with_http_info(addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Addresses addresses: An array of addresses. (required)
        :return: list[AccountInfoDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addresses']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_accounts_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addresses' is set
        if ('addresses' not in params or
                params['addresses'] is None):
            raise ValueError("Missing the required parameter `addresses` when calling `get_accounts_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'addresses' in params:
            body_params = params['addresses']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccountInfoDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incoming_transactions(self, public_key, **kwargs):  # noqa: E501
        """Get incoming transactions  # noqa: E501

        Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.incoming_transactions(public_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_key: The public key of the account. (required)
        :param int page_size: The number of transactions to return for each request.
        :param str id: The transaction id up to which transactions are returned. 
        :param str ordering: The ordering criteria. * -id: Descending order by id. * id: Ascending order by id. 
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.incoming_transactions_with_http_info(public_key, **kwargs)  # noqa: E501
        else:
            (data) = self.incoming_transactions_with_http_info(public_key, **kwargs)  # noqa: E501
            return data

    def incoming_transactions_with_http_info(self, public_key, **kwargs):  # noqa: E501
        """Get incoming transactions  # noqa: E501

        Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.incoming_transactions_with_http_info(public_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_key: The public key of the account. (required)
        :param int page_size: The number of transactions to return for each request.
        :param str id: The transaction id up to which transactions are returned. 
        :param str ordering: The ordering criteria. * -id: Descending order by id. * id: Ascending order by id. 
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_key', 'page_size', 'id', 'ordering']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incoming_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_key' is set
        if ('public_key' not in params or
                params['public_key'] is None):
            raise ValueError("Missing the required parameter `public_key` when calling `incoming_transactions`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `incoming_transactions`, must be a value less than or equal to `100`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 10:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `incoming_transactions`, must be a value greater than or equal to `10`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'public_key' in params:
            path_params['publicKey'] = params['public_key']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/{publicKey}/transactions/incoming', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def outgoing_transactions(self, public_key, **kwargs):  # noqa: E501
        """Get outgoing transactions  # noqa: E501

        Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.outgoing_transactions(public_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_key: The public key of the account. (required)
        :param int page_size: The number of transactions to return for each request.
        :param str id: The transaction id up to which transactions are returned. 
        :param str ordering: The ordering criteria. * -id: Descending order by id. * id: Ascending order by id. 
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.outgoing_transactions_with_http_info(public_key, **kwargs)  # noqa: E501
        else:
            (data) = self.outgoing_transactions_with_http_info(public_key, **kwargs)  # noqa: E501
            return data

    def outgoing_transactions_with_http_info(self, public_key, **kwargs):  # noqa: E501
        """Get outgoing transactions  # noqa: E501

        Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.outgoing_transactions_with_http_info(public_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_key: The public key of the account. (required)
        :param int page_size: The number of transactions to return for each request.
        :param str id: The transaction id up to which transactions are returned. 
        :param str ordering: The ordering criteria. * -id: Descending order by id. * id: Ascending order by id. 
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_key', 'page_size', 'id', 'ordering']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method outgoing_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_key' is set
        if ('public_key' not in params or
                params['public_key'] is None):
            raise ValueError("Missing the required parameter `public_key` when calling `outgoing_transactions`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `outgoing_transactions`, must be a value less than or equal to `100`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 10:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `outgoing_transactions`, must be a value greater than or equal to `10`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'public_key' in params:
            path_params['publicKey'] = params['public_key']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/{publicKey}/transactions/outgoing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partial_transactions(self, public_key, **kwargs):  # noqa: E501
        """Get aggregate bonded transactions information  # noqa: E501

        Gets an array of [aggregate bonded transactions](https://nemtech.github.io/concepts/aggregate-transaction.html) where the account is the sender or requires to cosign the transaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_transactions(public_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_key: The public key of the account. (required)
        :param int page_size: The number of transactions to return for each request.
        :param str id: The transaction id up to which transactions are returned. 
        :param str ordering: The ordering criteria. * -id: Descending order by id. * id: Ascending order by id. 
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.partial_transactions_with_http_info(public_key, **kwargs)  # noqa: E501
        else:
            (data) = self.partial_transactions_with_http_info(public_key, **kwargs)  # noqa: E501
            return data

    def partial_transactions_with_http_info(self, public_key, **kwargs):  # noqa: E501
        """Get aggregate bonded transactions information  # noqa: E501

        Gets an array of [aggregate bonded transactions](https://nemtech.github.io/concepts/aggregate-transaction.html) where the account is the sender or requires to cosign the transaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_transactions_with_http_info(public_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_key: The public key of the account. (required)
        :param int page_size: The number of transactions to return for each request.
        :param str id: The transaction id up to which transactions are returned. 
        :param str ordering: The ordering criteria. * -id: Descending order by id. * id: Ascending order by id. 
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_key', 'page_size', 'id', 'ordering']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partial_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_key' is set
        if ('public_key' not in params or
                params['public_key'] is None):
            raise ValueError("Missing the required parameter `public_key` when calling `partial_transactions`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `partial_transactions`, must be a value less than or equal to `100`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 10:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `partial_transactions`, must be a value greater than or equal to `10`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'public_key' in params:
            path_params['publicKey'] = params['public_key']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/{publicKey}/transactions/partial', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transactions(self, public_key, **kwargs):  # noqa: E501
        """Get confirmed transactions  # noqa: E501

        Gets an array of transactions for which an account is the sender or receiver.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transactions(public_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_key: The public key of the account. (required)
        :param int page_size: The number of transactions to return for each request.
        :param str id: The transaction id up to which transactions are returned. 
        :param str ordering: The ordering criteria. * -id: Descending order by id. * id: Ascending order by id. 
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transactions_with_http_info(public_key, **kwargs)  # noqa: E501
        else:
            (data) = self.transactions_with_http_info(public_key, **kwargs)  # noqa: E501
            return data

    def transactions_with_http_info(self, public_key, **kwargs):  # noqa: E501
        """Get confirmed transactions  # noqa: E501

        Gets an array of transactions for which an account is the sender or receiver.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transactions_with_http_info(public_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_key: The public key of the account. (required)
        :param int page_size: The number of transactions to return for each request.
        :param str id: The transaction id up to which transactions are returned. 
        :param str ordering: The ordering criteria. * -id: Descending order by id. * id: Ascending order by id. 
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_key', 'page_size', 'id', 'ordering']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_key' is set
        if ('public_key' not in params or
                params['public_key'] is None):
            raise ValueError("Missing the required parameter `public_key` when calling `transactions`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `transactions`, must be a value less than or equal to `100`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 10:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `transactions`, must be a value greater than or equal to `10`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'public_key' in params:
            path_params['publicKey'] = params['public_key']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/{publicKey}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unconfirmed_transactions(self, public_key, **kwargs):  # noqa: E501
        """Get unconfirmed transactions  # noqa: E501

        Gets the array of transactions not included in a block where an account is the sender or receiver.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unconfirmed_transactions(public_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_key: The public key of the account. (required)
        :param int page_size: The number of transactions to return for each request.
        :param str id: The transaction id up to which transactions are returned. 
        :param str ordering: The ordering criteria. * -id: Descending order by id. * id: Ascending order by id. 
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unconfirmed_transactions_with_http_info(public_key, **kwargs)  # noqa: E501
        else:
            (data) = self.unconfirmed_transactions_with_http_info(public_key, **kwargs)  # noqa: E501
            return data

    def unconfirmed_transactions_with_http_info(self, public_key, **kwargs):  # noqa: E501
        """Get unconfirmed transactions  # noqa: E501

        Gets the array of transactions not included in a block where an account is the sender or receiver.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unconfirmed_transactions_with_http_info(public_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str public_key: The public key of the account. (required)
        :param int page_size: The number of transactions to return for each request.
        :param str id: The transaction id up to which transactions are returned. 
        :param str ordering: The ordering criteria. * -id: Descending order by id. * id: Ascending order by id. 
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['public_key', 'page_size', 'id', 'ordering']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unconfirmed_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'public_key' is set
        if ('public_key' not in params or
                params['public_key'] is None):
            raise ValueError("Missing the required parameter `public_key` when calling `unconfirmed_transactions`")  # noqa: E501

        if 'page_size' in params and params['page_size'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `unconfirmed_transactions`, must be a value less than or equal to `100`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 10:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `unconfirmed_transactions`, must be a value greater than or equal to `10`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'public_key' in params:
            path_params['publicKey'] = params['public_key']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/{publicKey}/transactions/unconfirmed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
