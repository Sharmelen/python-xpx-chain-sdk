# coding: utf-8

"""
    Catapult REST API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BlockchainStorageInfoDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_blocks': 'int',
        'num_transactions': 'int',
        'num_accounts': 'int'
    }

    attribute_map = {
        'num_blocks': 'numBlocks',
        'num_transactions': 'numTransactions',
        'num_accounts': 'numAccounts'
    }

    def __init__(self, num_blocks=None, num_transactions=None, num_accounts=None):  # noqa: E501
        """BlockchainStorageInfoDTO - a model defined in Swagger"""  # noqa: E501

        self._num_blocks = None
        self._num_transactions = None
        self._num_accounts = None
        self.discriminator = None

        self.num_blocks = num_blocks
        self.num_transactions = num_transactions
        self.num_accounts = num_accounts

    @property
    def num_blocks(self):
        """Gets the num_blocks of this BlockchainStorageInfoDTO.  # noqa: E501


        :return: The num_blocks of this BlockchainStorageInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._num_blocks

    @num_blocks.setter
    def num_blocks(self, num_blocks):
        """Sets the num_blocks of this BlockchainStorageInfoDTO.


        :param num_blocks: The num_blocks of this BlockchainStorageInfoDTO.  # noqa: E501
        :type: int
        """
        if num_blocks is None:
            raise ValueError("Invalid value for `num_blocks`, must not be `None`")  # noqa: E501

        self._num_blocks = num_blocks

    @property
    def num_transactions(self):
        """Gets the num_transactions of this BlockchainStorageInfoDTO.  # noqa: E501


        :return: The num_transactions of this BlockchainStorageInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._num_transactions

    @num_transactions.setter
    def num_transactions(self, num_transactions):
        """Sets the num_transactions of this BlockchainStorageInfoDTO.


        :param num_transactions: The num_transactions of this BlockchainStorageInfoDTO.  # noqa: E501
        :type: int
        """
        if num_transactions is None:
            raise ValueError("Invalid value for `num_transactions`, must not be `None`")  # noqa: E501

        self._num_transactions = num_transactions

    @property
    def num_accounts(self):
        """Gets the num_accounts of this BlockchainStorageInfoDTO.  # noqa: E501


        :return: The num_accounts of this BlockchainStorageInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._num_accounts

    @num_accounts.setter
    def num_accounts(self, num_accounts):
        """Sets the num_accounts of this BlockchainStorageInfoDTO.


        :param num_accounts: The num_accounts of this BlockchainStorageInfoDTO.  # noqa: E501
        :type: int
        """
        if num_accounts is None:
            raise ValueError("Invalid value for `num_accounts`, must not be `None`")  # noqa: E501

        self._num_accounts = num_accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlockchainStorageInfoDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockchainStorageInfoDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
