# coding: utf-8

"""
    Catapult REST API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NodeInfoDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'public_key': 'str',
        'port': 'int',
        'network_identifier': 'int',
        'version': 'int',
        'roles': 'int',
        'host': 'str',
        'friendly_name': 'str'
    }

    attribute_map = {
        'public_key': 'publicKey',
        'port': 'port',
        'network_identifier': 'networkIdentifier',
        'version': 'version',
        'roles': 'roles',
        'host': 'host',
        'friendly_name': 'friendlyName'
    }

    def __init__(self, public_key=None, port=None, network_identifier=None, version=None, roles=None, host=None, friendly_name=None):  # noqa: E501
        """NodeInfoDTO - a model defined in Swagger"""  # noqa: E501

        self._public_key = None
        self._port = None
        self._network_identifier = None
        self._version = None
        self._roles = None
        self._host = None
        self._friendly_name = None
        self.discriminator = None

        self.public_key = public_key
        self.port = port
        self.network_identifier = network_identifier
        self.version = version
        self.roles = roles
        self.host = host
        self.friendly_name = friendly_name

    @property
    def public_key(self):
        """Gets the public_key of this NodeInfoDTO.  # noqa: E501


        :return: The public_key of this NodeInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this NodeInfoDTO.


        :param public_key: The public_key of this NodeInfoDTO.  # noqa: E501
        :type: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")  # noqa: E501

        self._public_key = public_key

    @property
    def port(self):
        """Gets the port of this NodeInfoDTO.  # noqa: E501


        :return: The port of this NodeInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this NodeInfoDTO.


        :param port: The port of this NodeInfoDTO.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def network_identifier(self):
        """Gets the network_identifier of this NodeInfoDTO.  # noqa: E501


        :return: The network_identifier of this NodeInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._network_identifier

    @network_identifier.setter
    def network_identifier(self, network_identifier):
        """Sets the network_identifier of this NodeInfoDTO.


        :param network_identifier: The network_identifier of this NodeInfoDTO.  # noqa: E501
        :type: int
        """
        if network_identifier is None:
            raise ValueError("Invalid value for `network_identifier`, must not be `None`")  # noqa: E501

        self._network_identifier = network_identifier

    @property
    def version(self):
        """Gets the version of this NodeInfoDTO.  # noqa: E501


        :return: The version of this NodeInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NodeInfoDTO.


        :param version: The version of this NodeInfoDTO.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def roles(self):
        """Gets the roles of this NodeInfoDTO.  # noqa: E501


        :return: The roles of this NodeInfoDTO.  # noqa: E501
        :rtype: int
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this NodeInfoDTO.


        :param roles: The roles of this NodeInfoDTO.  # noqa: E501
        :type: int
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")  # noqa: E501

        self._roles = roles

    @property
    def host(self):
        """Gets the host of this NodeInfoDTO.  # noqa: E501


        :return: The host of this NodeInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this NodeInfoDTO.


        :param host: The host of this NodeInfoDTO.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def friendly_name(self):
        """Gets the friendly_name of this NodeInfoDTO.  # noqa: E501


        :return: The friendly_name of this NodeInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this NodeInfoDTO.


        :param friendly_name: The friendly_name of this NodeInfoDTO.  # noqa: E501
        :type: str
        """
        if friendly_name is None:
            raise ValueError("Invalid value for `friendly_name`, must not be `None`")  # noqa: E501

        self._friendly_name = friendly_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeInfoDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeInfoDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
