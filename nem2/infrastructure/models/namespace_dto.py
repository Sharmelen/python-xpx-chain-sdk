# coding: utf-8

"""
    Catapult REST API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.alias_dto import AliasDTO  # noqa: F401,E501
from swagger_client.models.u_int64_dto import UInt64DTO  # noqa: F401,E501


class NamespaceDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner': 'str',
        'owner_address': 'str',
        'start_height': 'UInt64DTO',
        'end_height': 'UInt64DTO',
        'depth': 'int',
        'level0': 'UInt64DTO',
        'level1': 'UInt64DTO',
        'level2': 'UInt64DTO',
        'type': 'int',
        'alias': 'AliasDTO',
        'parent_id': 'UInt64DTO'
    }

    attribute_map = {
        'owner': 'owner',
        'owner_address': 'ownerAddress',
        'start_height': 'startHeight',
        'end_height': 'endHeight',
        'depth': 'depth',
        'level0': 'level0',
        'level1': 'level1',
        'level2': 'level2',
        'type': 'type',
        'alias': 'alias',
        'parent_id': 'parentId'
    }

    def __init__(self, owner=None, owner_address=None, start_height=None, end_height=None, depth=None, level0=None, level1=None, level2=None, type=None, alias=None, parent_id=None):  # noqa: E501
        """NamespaceDTO - a model defined in Swagger"""  # noqa: E501

        self._owner = None
        self._owner_address = None
        self._start_height = None
        self._end_height = None
        self._depth = None
        self._level0 = None
        self._level1 = None
        self._level2 = None
        self._type = None
        self._alias = None
        self._parent_id = None
        self.discriminator = None

        self.owner = owner
        self.owner_address = owner_address
        self.start_height = start_height
        self.end_height = end_height
        self.depth = depth
        self.level0 = level0
        if level1 is not None:
            self.level1 = level1
        if level2 is not None:
            self.level2 = level2
        self.type = type
        self.alias = alias
        self.parent_id = parent_id

    @property
    def owner(self):
        """Gets the owner of this NamespaceDTO.  # noqa: E501


        :return: The owner of this NamespaceDTO.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this NamespaceDTO.


        :param owner: The owner of this NamespaceDTO.  # noqa: E501
        :type: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def owner_address(self):
        """Gets the owner_address of this NamespaceDTO.  # noqa: E501


        :return: The owner_address of this NamespaceDTO.  # noqa: E501
        :rtype: str
        """
        return self._owner_address

    @owner_address.setter
    def owner_address(self, owner_address):
        """Sets the owner_address of this NamespaceDTO.


        :param owner_address: The owner_address of this NamespaceDTO.  # noqa: E501
        :type: str
        """
        if owner_address is None:
            raise ValueError("Invalid value for `owner_address`, must not be `None`")  # noqa: E501

        self._owner_address = owner_address

    @property
    def start_height(self):
        """Gets the start_height of this NamespaceDTO.  # noqa: E501


        :return: The start_height of this NamespaceDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._start_height

    @start_height.setter
    def start_height(self, start_height):
        """Sets the start_height of this NamespaceDTO.


        :param start_height: The start_height of this NamespaceDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if start_height is None:
            raise ValueError("Invalid value for `start_height`, must not be `None`")  # noqa: E501

        self._start_height = start_height

    @property
    def end_height(self):
        """Gets the end_height of this NamespaceDTO.  # noqa: E501


        :return: The end_height of this NamespaceDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._end_height

    @end_height.setter
    def end_height(self, end_height):
        """Sets the end_height of this NamespaceDTO.


        :param end_height: The end_height of this NamespaceDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if end_height is None:
            raise ValueError("Invalid value for `end_height`, must not be `None`")  # noqa: E501

        self._end_height = end_height

    @property
    def depth(self):
        """Gets the depth of this NamespaceDTO.  # noqa: E501


        :return: The depth of this NamespaceDTO.  # noqa: E501
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this NamespaceDTO.


        :param depth: The depth of this NamespaceDTO.  # noqa: E501
        :type: int
        """
        if depth is None:
            raise ValueError("Invalid value for `depth`, must not be `None`")  # noqa: E501

        self._depth = depth

    @property
    def level0(self):
        """Gets the level0 of this NamespaceDTO.  # noqa: E501


        :return: The level0 of this NamespaceDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._level0

    @level0.setter
    def level0(self, level0):
        """Sets the level0 of this NamespaceDTO.


        :param level0: The level0 of this NamespaceDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if level0 is None:
            raise ValueError("Invalid value for `level0`, must not be `None`")  # noqa: E501

        self._level0 = level0

    @property
    def level1(self):
        """Gets the level1 of this NamespaceDTO.  # noqa: E501


        :return: The level1 of this NamespaceDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._level1

    @level1.setter
    def level1(self, level1):
        """Sets the level1 of this NamespaceDTO.


        :param level1: The level1 of this NamespaceDTO.  # noqa: E501
        :type: UInt64DTO
        """

        self._level1 = level1

    @property
    def level2(self):
        """Gets the level2 of this NamespaceDTO.  # noqa: E501


        :return: The level2 of this NamespaceDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._level2

    @level2.setter
    def level2(self, level2):
        """Sets the level2 of this NamespaceDTO.


        :param level2: The level2 of this NamespaceDTO.  # noqa: E501
        :type: UInt64DTO
        """

        self._level2 = level2

    @property
    def type(self):
        """Gets the type of this NamespaceDTO.  # noqa: E501


        :return: The type of this NamespaceDTO.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NamespaceDTO.


        :param type: The type of this NamespaceDTO.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def alias(self):
        """Gets the alias of this NamespaceDTO.  # noqa: E501


        :return: The alias of this NamespaceDTO.  # noqa: E501
        :rtype: AliasDTO
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this NamespaceDTO.


        :param alias: The alias of this NamespaceDTO.  # noqa: E501
        :type: AliasDTO
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")  # noqa: E501

        self._alias = alias

    @property
    def parent_id(self):
        """Gets the parent_id of this NamespaceDTO.  # noqa: E501


        :return: The parent_id of this NamespaceDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this NamespaceDTO.


        :param parent_id: The parent_id of this NamespaceDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")  # noqa: E501

        self._parent_id = parent_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NamespaceDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NamespaceDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
