# coding: utf-8

"""
    Catapult REST API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MultisigDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'account_address': 'str',
        'min_approval': 'int',
        'min_removal': 'int',
        'cosignatories': 'list[str]',
        'multisig_accounts': 'list[str]'
    }

    attribute_map = {
        'account': 'account',
        'account_address': 'accountAddress',
        'min_approval': 'minApproval',
        'min_removal': 'minRemoval',
        'cosignatories': 'cosignatories',
        'multisig_accounts': 'multisigAccounts'
    }

    def __init__(self, account=None, account_address=None, min_approval=None, min_removal=None, cosignatories=None, multisig_accounts=None):  # noqa: E501
        """MultisigDTO - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._account_address = None
        self._min_approval = None
        self._min_removal = None
        self._cosignatories = None
        self._multisig_accounts = None
        self.discriminator = None

        self.account = account
        if account_address is not None:
            self.account_address = account_address
        self.min_approval = min_approval
        self.min_removal = min_removal
        self.cosignatories = cosignatories
        self.multisig_accounts = multisig_accounts

    @property
    def account(self):
        """Gets the account of this MultisigDTO.  # noqa: E501


        :return: The account of this MultisigDTO.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this MultisigDTO.


        :param account: The account of this MultisigDTO.  # noqa: E501
        :type: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def account_address(self):
        """Gets the account_address of this MultisigDTO.  # noqa: E501


        :return: The account_address of this MultisigDTO.  # noqa: E501
        :rtype: str
        """
        return self._account_address

    @account_address.setter
    def account_address(self, account_address):
        """Sets the account_address of this MultisigDTO.


        :param account_address: The account_address of this MultisigDTO.  # noqa: E501
        :type: str
        """

        self._account_address = account_address

    @property
    def min_approval(self):
        """Gets the min_approval of this MultisigDTO.  # noqa: E501


        :return: The min_approval of this MultisigDTO.  # noqa: E501
        :rtype: int
        """
        return self._min_approval

    @min_approval.setter
    def min_approval(self, min_approval):
        """Sets the min_approval of this MultisigDTO.


        :param min_approval: The min_approval of this MultisigDTO.  # noqa: E501
        :type: int
        """
        if min_approval is None:
            raise ValueError("Invalid value for `min_approval`, must not be `None`")  # noqa: E501

        self._min_approval = min_approval

    @property
    def min_removal(self):
        """Gets the min_removal of this MultisigDTO.  # noqa: E501


        :return: The min_removal of this MultisigDTO.  # noqa: E501
        :rtype: int
        """
        return self._min_removal

    @min_removal.setter
    def min_removal(self, min_removal):
        """Sets the min_removal of this MultisigDTO.


        :param min_removal: The min_removal of this MultisigDTO.  # noqa: E501
        :type: int
        """
        if min_removal is None:
            raise ValueError("Invalid value for `min_removal`, must not be `None`")  # noqa: E501

        self._min_removal = min_removal

    @property
    def cosignatories(self):
        """Gets the cosignatories of this MultisigDTO.  # noqa: E501


        :return: The cosignatories of this MultisigDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._cosignatories

    @cosignatories.setter
    def cosignatories(self, cosignatories):
        """Sets the cosignatories of this MultisigDTO.


        :param cosignatories: The cosignatories of this MultisigDTO.  # noqa: E501
        :type: list[str]
        """
        if cosignatories is None:
            raise ValueError("Invalid value for `cosignatories`, must not be `None`")  # noqa: E501

        self._cosignatories = cosignatories

    @property
    def multisig_accounts(self):
        """Gets the multisig_accounts of this MultisigDTO.  # noqa: E501


        :return: The multisig_accounts of this MultisigDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._multisig_accounts

    @multisig_accounts.setter
    def multisig_accounts(self, multisig_accounts):
        """Sets the multisig_accounts of this MultisigDTO.


        :param multisig_accounts: The multisig_accounts of this MultisigDTO.  # noqa: E501
        :type: list[str]
        """
        if multisig_accounts is None:
            raise ValueError("Invalid value for `multisig_accounts`, must not be `None`")  # noqa: E501

        self._multisig_accounts = multisig_accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MultisigDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultisigDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
