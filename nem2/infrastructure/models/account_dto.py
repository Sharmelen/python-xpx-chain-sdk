# coding: utf-8

"""
    Catapult REST API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.mosaic_dto import MosaicDTO  # noqa: F401,E501
from swagger_client.models.u_int64_dto import UInt64DTO  # noqa: F401,E501


class AccountDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'address_height': 'UInt64DTO',
        'public_key': 'str',
        'public_key_height': 'UInt64DTO',
        'mosaics': 'list[MosaicDTO]',
        'importance': 'UInt64DTO',
        'importance_height': 'UInt64DTO'
    }

    attribute_map = {
        'address': 'address',
        'address_height': 'addressHeight',
        'public_key': 'publicKey',
        'public_key_height': 'publicKeyHeight',
        'mosaics': 'mosaics',
        'importance': 'importance',
        'importance_height': 'importanceHeight'
    }

    def __init__(self, address=None, address_height=None, public_key=None, public_key_height=None, mosaics=None, importance=None, importance_height=None):  # noqa: E501
        """AccountDTO - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._address_height = None
        self._public_key = None
        self._public_key_height = None
        self._mosaics = None
        self._importance = None
        self._importance_height = None
        self.discriminator = None

        self.address = address
        self.address_height = address_height
        self.public_key = public_key
        self.public_key_height = public_key_height
        self.mosaics = mosaics
        self.importance = importance
        self.importance_height = importance_height

    @property
    def address(self):
        """Gets the address of this AccountDTO.  # noqa: E501


        :return: The address of this AccountDTO.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AccountDTO.


        :param address: The address of this AccountDTO.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def address_height(self):
        """Gets the address_height of this AccountDTO.  # noqa: E501


        :return: The address_height of this AccountDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._address_height

    @address_height.setter
    def address_height(self, address_height):
        """Sets the address_height of this AccountDTO.


        :param address_height: The address_height of this AccountDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if address_height is None:
            raise ValueError("Invalid value for `address_height`, must not be `None`")  # noqa: E501

        self._address_height = address_height

    @property
    def public_key(self):
        """Gets the public_key of this AccountDTO.  # noqa: E501


        :return: The public_key of this AccountDTO.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this AccountDTO.


        :param public_key: The public_key of this AccountDTO.  # noqa: E501
        :type: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")  # noqa: E501

        self._public_key = public_key

    @property
    def public_key_height(self):
        """Gets the public_key_height of this AccountDTO.  # noqa: E501


        :return: The public_key_height of this AccountDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._public_key_height

    @public_key_height.setter
    def public_key_height(self, public_key_height):
        """Sets the public_key_height of this AccountDTO.


        :param public_key_height: The public_key_height of this AccountDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if public_key_height is None:
            raise ValueError("Invalid value for `public_key_height`, must not be `None`")  # noqa: E501

        self._public_key_height = public_key_height

    @property
    def mosaics(self):
        """Gets the mosaics of this AccountDTO.  # noqa: E501


        :return: The mosaics of this AccountDTO.  # noqa: E501
        :rtype: list[MosaicDTO]
        """
        return self._mosaics

    @mosaics.setter
    def mosaics(self, mosaics):
        """Sets the mosaics of this AccountDTO.


        :param mosaics: The mosaics of this AccountDTO.  # noqa: E501
        :type: list[MosaicDTO]
        """
        if mosaics is None:
            raise ValueError("Invalid value for `mosaics`, must not be `None`")  # noqa: E501

        self._mosaics = mosaics

    @property
    def importance(self):
        """Gets the importance of this AccountDTO.  # noqa: E501


        :return: The importance of this AccountDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this AccountDTO.


        :param importance: The importance of this AccountDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if importance is None:
            raise ValueError("Invalid value for `importance`, must not be `None`")  # noqa: E501

        self._importance = importance

    @property
    def importance_height(self):
        """Gets the importance_height of this AccountDTO.  # noqa: E501


        :return: The importance_height of this AccountDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._importance_height

    @importance_height.setter
    def importance_height(self, importance_height):
        """Sets the importance_height of this AccountDTO.


        :param importance_height: The importance_height of this AccountDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if importance_height is None:
            raise ValueError("Invalid value for `importance_height`, must not be `None`")  # noqa: E501

        self._importance_height = importance_height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
