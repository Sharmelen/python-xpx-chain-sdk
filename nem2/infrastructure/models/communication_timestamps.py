# coding: utf-8

"""
    Catapult REST API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.u_int64_dto import UInt64DTO  # noqa: F401,E501


class CommunicationTimestamps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'send_timestamp': 'UInt64DTO',
        'receive_timestamp': 'UInt64DTO'
    }

    attribute_map = {
        'send_timestamp': 'sendTimestamp',
        'receive_timestamp': 'receiveTimestamp'
    }

    def __init__(self, send_timestamp=None, receive_timestamp=None):  # noqa: E501
        """CommunicationTimestamps - a model defined in Swagger"""  # noqa: E501

        self._send_timestamp = None
        self._receive_timestamp = None
        self.discriminator = None

        if send_timestamp is not None:
            self.send_timestamp = send_timestamp
        if receive_timestamp is not None:
            self.receive_timestamp = receive_timestamp

    @property
    def send_timestamp(self):
        """Gets the send_timestamp of this CommunicationTimestamps.  # noqa: E501


        :return: The send_timestamp of this CommunicationTimestamps.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._send_timestamp

    @send_timestamp.setter
    def send_timestamp(self, send_timestamp):
        """Sets the send_timestamp of this CommunicationTimestamps.


        :param send_timestamp: The send_timestamp of this CommunicationTimestamps.  # noqa: E501
        :type: UInt64DTO
        """

        self._send_timestamp = send_timestamp

    @property
    def receive_timestamp(self):
        """Gets the receive_timestamp of this CommunicationTimestamps.  # noqa: E501


        :return: The receive_timestamp of this CommunicationTimestamps.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._receive_timestamp

    @receive_timestamp.setter
    def receive_timestamp(self, receive_timestamp):
        """Sets the receive_timestamp of this CommunicationTimestamps.


        :param receive_timestamp: The receive_timestamp of this CommunicationTimestamps.  # noqa: E501
        :type: UInt64DTO
        """

        self._receive_timestamp = receive_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommunicationTimestamps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommunicationTimestamps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
