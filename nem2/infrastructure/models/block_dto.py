# coding: utf-8

"""
    Catapult REST API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.u_int64_dto import UInt64DTO  # noqa: F401,E501


class BlockDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'signature': 'str',
        'signer': 'str',
        'version': 'float',
        'type': 'float',
        'height': 'UInt64DTO',
        'timestamp': 'UInt64DTO',
        'difficulty': 'UInt64DTO',
        'fee_multiplier': 'int',
        'previous_block_hash': 'str',
        'block_transactions_hash': 'str',
        'block_receipts_hash': 'str',
        'state_hash': 'str',
        'beneficiary_public_key': 'str'
    }

    attribute_map = {
        'signature': 'signature',
        'signer': 'signer',
        'version': 'version',
        'type': 'type',
        'height': 'height',
        'timestamp': 'timestamp',
        'difficulty': 'difficulty',
        'fee_multiplier': 'feeMultiplier',
        'previous_block_hash': 'previousBlockHash',
        'block_transactions_hash': 'blockTransactionsHash',
        'block_receipts_hash': 'blockReceiptsHash',
        'state_hash': 'stateHash',
        'beneficiary_public_key': 'beneficiaryPublicKey'
    }

    def __init__(self, signature=None, signer=None, version=None, type=None, height=None, timestamp=None, difficulty=None, fee_multiplier=None, previous_block_hash=None, block_transactions_hash=None, block_receipts_hash=None, state_hash=None, beneficiary_public_key=None):  # noqa: E501
        """BlockDTO - a model defined in Swagger"""  # noqa: E501

        self._signature = None
        self._signer = None
        self._version = None
        self._type = None
        self._height = None
        self._timestamp = None
        self._difficulty = None
        self._fee_multiplier = None
        self._previous_block_hash = None
        self._block_transactions_hash = None
        self._block_receipts_hash = None
        self._state_hash = None
        self._beneficiary_public_key = None
        self.discriminator = None

        self.signature = signature
        self.signer = signer
        self.version = version
        self.type = type
        self.height = height
        self.timestamp = timestamp
        self.difficulty = difficulty
        self.fee_multiplier = fee_multiplier
        self.previous_block_hash = previous_block_hash
        self.block_transactions_hash = block_transactions_hash
        self.block_receipts_hash = block_receipts_hash
        self.state_hash = state_hash
        self.beneficiary_public_key = beneficiary_public_key

    @property
    def signature(self):
        """Gets the signature of this BlockDTO.  # noqa: E501


        :return: The signature of this BlockDTO.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this BlockDTO.


        :param signature: The signature of this BlockDTO.  # noqa: E501
        :type: str
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")  # noqa: E501

        self._signature = signature

    @property
    def signer(self):
        """Gets the signer of this BlockDTO.  # noqa: E501


        :return: The signer of this BlockDTO.  # noqa: E501
        :rtype: str
        """
        return self._signer

    @signer.setter
    def signer(self, signer):
        """Sets the signer of this BlockDTO.


        :param signer: The signer of this BlockDTO.  # noqa: E501
        :type: str
        """
        if signer is None:
            raise ValueError("Invalid value for `signer`, must not be `None`")  # noqa: E501

        self._signer = signer

    @property
    def version(self):
        """Gets the version of this BlockDTO.  # noqa: E501


        :return: The version of this BlockDTO.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BlockDTO.


        :param version: The version of this BlockDTO.  # noqa: E501
        :type: float
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def type(self):
        """Gets the type of this BlockDTO.  # noqa: E501


        :return: The type of this BlockDTO.  # noqa: E501
        :rtype: float
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BlockDTO.


        :param type: The type of this BlockDTO.  # noqa: E501
        :type: float
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def height(self):
        """Gets the height of this BlockDTO.  # noqa: E501


        :return: The height of this BlockDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this BlockDTO.


        :param height: The height of this BlockDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def timestamp(self):
        """Gets the timestamp of this BlockDTO.  # noqa: E501


        :return: The timestamp of this BlockDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BlockDTO.


        :param timestamp: The timestamp of this BlockDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def difficulty(self):
        """Gets the difficulty of this BlockDTO.  # noqa: E501


        :return: The difficulty of this BlockDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """Sets the difficulty of this BlockDTO.


        :param difficulty: The difficulty of this BlockDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if difficulty is None:
            raise ValueError("Invalid value for `difficulty`, must not be `None`")  # noqa: E501

        self._difficulty = difficulty

    @property
    def fee_multiplier(self):
        """Gets the fee_multiplier of this BlockDTO.  # noqa: E501


        :return: The fee_multiplier of this BlockDTO.  # noqa: E501
        :rtype: int
        """
        return self._fee_multiplier

    @fee_multiplier.setter
    def fee_multiplier(self, fee_multiplier):
        """Sets the fee_multiplier of this BlockDTO.


        :param fee_multiplier: The fee_multiplier of this BlockDTO.  # noqa: E501
        :type: int
        """
        if fee_multiplier is None:
            raise ValueError("Invalid value for `fee_multiplier`, must not be `None`")  # noqa: E501

        self._fee_multiplier = fee_multiplier

    @property
    def previous_block_hash(self):
        """Gets the previous_block_hash of this BlockDTO.  # noqa: E501


        :return: The previous_block_hash of this BlockDTO.  # noqa: E501
        :rtype: str
        """
        return self._previous_block_hash

    @previous_block_hash.setter
    def previous_block_hash(self, previous_block_hash):
        """Sets the previous_block_hash of this BlockDTO.


        :param previous_block_hash: The previous_block_hash of this BlockDTO.  # noqa: E501
        :type: str
        """
        if previous_block_hash is None:
            raise ValueError("Invalid value for `previous_block_hash`, must not be `None`")  # noqa: E501

        self._previous_block_hash = previous_block_hash

    @property
    def block_transactions_hash(self):
        """Gets the block_transactions_hash of this BlockDTO.  # noqa: E501


        :return: The block_transactions_hash of this BlockDTO.  # noqa: E501
        :rtype: str
        """
        return self._block_transactions_hash

    @block_transactions_hash.setter
    def block_transactions_hash(self, block_transactions_hash):
        """Sets the block_transactions_hash of this BlockDTO.


        :param block_transactions_hash: The block_transactions_hash of this BlockDTO.  # noqa: E501
        :type: str
        """
        if block_transactions_hash is None:
            raise ValueError("Invalid value for `block_transactions_hash`, must not be `None`")  # noqa: E501

        self._block_transactions_hash = block_transactions_hash

    @property
    def block_receipts_hash(self):
        """Gets the block_receipts_hash of this BlockDTO.  # noqa: E501


        :return: The block_receipts_hash of this BlockDTO.  # noqa: E501
        :rtype: str
        """
        return self._block_receipts_hash

    @block_receipts_hash.setter
    def block_receipts_hash(self, block_receipts_hash):
        """Sets the block_receipts_hash of this BlockDTO.


        :param block_receipts_hash: The block_receipts_hash of this BlockDTO.  # noqa: E501
        :type: str
        """
        if block_receipts_hash is None:
            raise ValueError("Invalid value for `block_receipts_hash`, must not be `None`")  # noqa: E501

        self._block_receipts_hash = block_receipts_hash

    @property
    def state_hash(self):
        """Gets the state_hash of this BlockDTO.  # noqa: E501


        :return: The state_hash of this BlockDTO.  # noqa: E501
        :rtype: str
        """
        return self._state_hash

    @state_hash.setter
    def state_hash(self, state_hash):
        """Sets the state_hash of this BlockDTO.


        :param state_hash: The state_hash of this BlockDTO.  # noqa: E501
        :type: str
        """
        if state_hash is None:
            raise ValueError("Invalid value for `state_hash`, must not be `None`")  # noqa: E501

        self._state_hash = state_hash

    @property
    def beneficiary_public_key(self):
        """Gets the beneficiary_public_key of this BlockDTO.  # noqa: E501


        :return: The beneficiary_public_key of this BlockDTO.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_public_key

    @beneficiary_public_key.setter
    def beneficiary_public_key(self, beneficiary_public_key):
        """Sets the beneficiary_public_key of this BlockDTO.


        :param beneficiary_public_key: The beneficiary_public_key of this BlockDTO.  # noqa: E501
        :type: str
        """
        if beneficiary_public_key is None:
            raise ValueError("Invalid value for `beneficiary_public_key`, must not be `None`")  # noqa: E501

        self._beneficiary_public_key = beneficiary_public_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlockDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
