# coding: utf-8

"""
    Catapult REST API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.u_int64_dto import UInt64DTO  # noqa: F401,E501


class BlockMetaDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hash': 'str',
        'generation_hash': 'str',
        'total_fee': 'UInt64DTO',
        'num_transactions': 'float'
    }

    attribute_map = {
        'hash': 'hash',
        'generation_hash': 'generationHash',
        'total_fee': 'totalFee',
        'num_transactions': 'numTransactions'
    }

    def __init__(self, hash=None, generation_hash=None, total_fee=None, num_transactions=None):  # noqa: E501
        """BlockMetaDTO - a model defined in Swagger"""  # noqa: E501

        self._hash = None
        self._generation_hash = None
        self._total_fee = None
        self._num_transactions = None
        self.discriminator = None

        self.hash = hash
        self.generation_hash = generation_hash
        self.total_fee = total_fee
        self.num_transactions = num_transactions

    @property
    def hash(self):
        """Gets the hash of this BlockMetaDTO.  # noqa: E501


        :return: The hash of this BlockMetaDTO.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this BlockMetaDTO.


        :param hash: The hash of this BlockMetaDTO.  # noqa: E501
        :type: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501

        self._hash = hash

    @property
    def generation_hash(self):
        """Gets the generation_hash of this BlockMetaDTO.  # noqa: E501


        :return: The generation_hash of this BlockMetaDTO.  # noqa: E501
        :rtype: str
        """
        return self._generation_hash

    @generation_hash.setter
    def generation_hash(self, generation_hash):
        """Sets the generation_hash of this BlockMetaDTO.


        :param generation_hash: The generation_hash of this BlockMetaDTO.  # noqa: E501
        :type: str
        """
        if generation_hash is None:
            raise ValueError("Invalid value for `generation_hash`, must not be `None`")  # noqa: E501

        self._generation_hash = generation_hash

    @property
    def total_fee(self):
        """Gets the total_fee of this BlockMetaDTO.  # noqa: E501


        :return: The total_fee of this BlockMetaDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._total_fee

    @total_fee.setter
    def total_fee(self, total_fee):
        """Sets the total_fee of this BlockMetaDTO.


        :param total_fee: The total_fee of this BlockMetaDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if total_fee is None:
            raise ValueError("Invalid value for `total_fee`, must not be `None`")  # noqa: E501

        self._total_fee = total_fee

    @property
    def num_transactions(self):
        """Gets the num_transactions of this BlockMetaDTO.  # noqa: E501


        :return: The num_transactions of this BlockMetaDTO.  # noqa: E501
        :rtype: float
        """
        return self._num_transactions

    @num_transactions.setter
    def num_transactions(self, num_transactions):
        """Sets the num_transactions of this BlockMetaDTO.


        :param num_transactions: The num_transactions of this BlockMetaDTO.  # noqa: E501
        :type: float
        """
        if num_transactions is None:
            raise ValueError("Invalid value for `num_transactions`, must not be `None`")  # noqa: E501

        self._num_transactions = num_transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlockMetaDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockMetaDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
