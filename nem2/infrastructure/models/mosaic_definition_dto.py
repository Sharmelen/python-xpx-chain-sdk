# coding: utf-8

"""
    Catapult REST API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.mosaic_properties_dto import MosaicPropertiesDTO  # noqa: F401,E501
from swagger_client.models.u_int64_dto import UInt64DTO  # noqa: F401,E501


class MosaicDefinitionDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mosaic_id': 'UInt64DTO',
        'supply': 'UInt64DTO',
        'height': 'UInt64DTO',
        'owner': 'str',
        'revision': 'int',
        'properties': 'MosaicPropertiesDTO',
        'levy': 'object'
    }

    attribute_map = {
        'mosaic_id': 'mosaicId',
        'supply': 'supply',
        'height': 'height',
        'owner': 'owner',
        'revision': 'revision',
        'properties': 'properties',
        'levy': 'levy'
    }

    def __init__(self, mosaic_id=None, supply=None, height=None, owner=None, revision=None, properties=None, levy=None):  # noqa: E501
        """MosaicDefinitionDTO - a model defined in Swagger"""  # noqa: E501

        self._mosaic_id = None
        self._supply = None
        self._height = None
        self._owner = None
        self._revision = None
        self._properties = None
        self._levy = None
        self.discriminator = None

        self.mosaic_id = mosaic_id
        self.supply = supply
        self.height = height
        self.owner = owner
        self.revision = revision
        self.properties = properties
        self.levy = levy

    @property
    def mosaic_id(self):
        """Gets the mosaic_id of this MosaicDefinitionDTO.  # noqa: E501


        :return: The mosaic_id of this MosaicDefinitionDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._mosaic_id

    @mosaic_id.setter
    def mosaic_id(self, mosaic_id):
        """Sets the mosaic_id of this MosaicDefinitionDTO.


        :param mosaic_id: The mosaic_id of this MosaicDefinitionDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if mosaic_id is None:
            raise ValueError("Invalid value for `mosaic_id`, must not be `None`")  # noqa: E501

        self._mosaic_id = mosaic_id

    @property
    def supply(self):
        """Gets the supply of this MosaicDefinitionDTO.  # noqa: E501


        :return: The supply of this MosaicDefinitionDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._supply

    @supply.setter
    def supply(self, supply):
        """Sets the supply of this MosaicDefinitionDTO.


        :param supply: The supply of this MosaicDefinitionDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if supply is None:
            raise ValueError("Invalid value for `supply`, must not be `None`")  # noqa: E501

        self._supply = supply

    @property
    def height(self):
        """Gets the height of this MosaicDefinitionDTO.  # noqa: E501


        :return: The height of this MosaicDefinitionDTO.  # noqa: E501
        :rtype: UInt64DTO
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this MosaicDefinitionDTO.


        :param height: The height of this MosaicDefinitionDTO.  # noqa: E501
        :type: UInt64DTO
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def owner(self):
        """Gets the owner of this MosaicDefinitionDTO.  # noqa: E501


        :return: The owner of this MosaicDefinitionDTO.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this MosaicDefinitionDTO.


        :param owner: The owner of this MosaicDefinitionDTO.  # noqa: E501
        :type: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def revision(self):
        """Gets the revision of this MosaicDefinitionDTO.  # noqa: E501


        :return: The revision of this MosaicDefinitionDTO.  # noqa: E501
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this MosaicDefinitionDTO.


        :param revision: The revision of this MosaicDefinitionDTO.  # noqa: E501
        :type: int
        """
        if revision is None:
            raise ValueError("Invalid value for `revision`, must not be `None`")  # noqa: E501

        self._revision = revision

    @property
    def properties(self):
        """Gets the properties of this MosaicDefinitionDTO.  # noqa: E501


        :return: The properties of this MosaicDefinitionDTO.  # noqa: E501
        :rtype: MosaicPropertiesDTO
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MosaicDefinitionDTO.


        :param properties: The properties of this MosaicDefinitionDTO.  # noqa: E501
        :type: MosaicPropertiesDTO
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def levy(self):
        """Gets the levy of this MosaicDefinitionDTO.  # noqa: E501


        :return: The levy of this MosaicDefinitionDTO.  # noqa: E501
        :rtype: object
        """
        return self._levy

    @levy.setter
    def levy(self, levy):
        """Sets the levy of this MosaicDefinitionDTO.


        :param levy: The levy of this MosaicDefinitionDTO.  # noqa: E501
        :type: object
        """
        if levy is None:
            raise ValueError("Invalid value for `levy`, must not be `None`")  # noqa: E501

        self._levy = levy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MosaicDefinitionDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MosaicDefinitionDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
